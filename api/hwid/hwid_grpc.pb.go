// Copyright 2024 TII (SSRC) and the Ghaf contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.4
// source: hwid.proto

package hwid

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HwidService_GetHwId_FullMethodName = "/hwid.HwidService/GetHwId"
)

// HwidServiceClient is the client API for HwidService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HwidServiceClient interface {
	GetHwId(ctx context.Context, in *HwIdRequest, opts ...grpc.CallOption) (*HwIdResponse, error)
}

type hwidServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHwidServiceClient(cc grpc.ClientConnInterface) HwidServiceClient {
	return &hwidServiceClient{cc}
}

func (c *hwidServiceClient) GetHwId(ctx context.Context, in *HwIdRequest, opts ...grpc.CallOption) (*HwIdResponse, error) {
	out := new(HwIdResponse)
	err := c.cc.Invoke(ctx, HwidService_GetHwId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HwidServiceServer is the server API for HwidService service.
// All implementations must embed UnimplementedHwidServiceServer
// for forward compatibility
type HwidServiceServer interface {
	GetHwId(context.Context, *HwIdRequest) (*HwIdResponse, error)
	mustEmbedUnimplementedHwidServiceServer()
}

// UnimplementedHwidServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHwidServiceServer struct {
}

func (UnimplementedHwidServiceServer) GetHwId(context.Context, *HwIdRequest) (*HwIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHwId not implemented")
}
func (UnimplementedHwidServiceServer) mustEmbedUnimplementedHwidServiceServer() {}

// UnsafeHwidServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HwidServiceServer will
// result in compilation errors.
type UnsafeHwidServiceServer interface {
	mustEmbedUnimplementedHwidServiceServer()
}

func RegisterHwidServiceServer(s grpc.ServiceRegistrar, srv HwidServiceServer) {
	s.RegisterService(&HwidService_ServiceDesc, srv)
}

func _HwidService_GetHwId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HwIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HwidServiceServer).GetHwId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HwidService_GetHwId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HwidServiceServer).GetHwId(ctx, req.(*HwIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HwidService_ServiceDesc is the grpc.ServiceDesc for HwidService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HwidService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hwid.HwidService",
	HandlerType: (*HwidServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHwId",
			Handler:    _HwidService_GetHwId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hwid.proto",
}
