// Copyright 2024 TII (SSRC) and the Ghaf contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: wifi.proto

package wifi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WifiService_MonitorWifiNetworks_FullMethodName = "/wifimanager.WifiService/MonitorWifiNetworks"
)

// WifiServiceClient is the client API for WifiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WifiServiceClient interface {
	MonitorWifiNetworks(ctx context.Context, in *WifiNetworkRequest, opts ...grpc.CallOption) (*WifiNetworkResponse, error)
}

type wifiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWifiServiceClient(cc grpc.ClientConnInterface) WifiServiceClient {
	return &wifiServiceClient{cc}
}

func (c *wifiServiceClient) MonitorWifiNetworks(ctx context.Context, in *WifiNetworkRequest, opts ...grpc.CallOption) (*WifiNetworkResponse, error) {
	out := new(WifiNetworkResponse)
	err := c.cc.Invoke(ctx, WifiService_MonitorWifiNetworks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WifiServiceServer is the server API for WifiService service.
// All implementations must embed UnimplementedWifiServiceServer
// for forward compatibility
type WifiServiceServer interface {
	MonitorWifiNetworks(context.Context, *WifiNetworkRequest) (*WifiNetworkResponse, error)
	mustEmbedUnimplementedWifiServiceServer()
}

// UnimplementedWifiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWifiServiceServer struct {
}

func (UnimplementedWifiServiceServer) MonitorWifiNetworks(context.Context, *WifiNetworkRequest) (*WifiNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitorWifiNetworks not implemented")
}
func (UnimplementedWifiServiceServer) mustEmbedUnimplementedWifiServiceServer() {}

// UnsafeWifiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WifiServiceServer will
// result in compilation errors.
type UnsafeWifiServiceServer interface {
	mustEmbedUnimplementedWifiServiceServer()
}

func RegisterWifiServiceServer(s grpc.ServiceRegistrar, srv WifiServiceServer) {
	s.RegisterService(&WifiService_ServiceDesc, srv)
}

func _WifiService_MonitorWifiNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WifiNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServiceServer).MonitorWifiNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WifiService_MonitorWifiNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServiceServer).MonitorWifiNetworks(ctx, req.(*WifiNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WifiService_ServiceDesc is the grpc.ServiceDesc for WifiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WifiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wifimanager.WifiService",
	HandlerType: (*WifiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MonitorWifiNetworks",
			Handler:    _WifiService_MonitorWifiNetworks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wifi.proto",
}
